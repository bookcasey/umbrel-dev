#!/usr/bin/env bash
set -euo pipefail

show_help() {
  cat << EOF
umbrel-dev 1.2.1

Automatically initialize and manage an Umbrel development environment.

Usage: umbrel-dev <command> [options]

Commands:
    help                    Show this help message
    init                    Initialize an Umbrel development environment in the working directory
    boot                    Boot the development VM
    shutdown                Shutdown the development VM
    destroy                 Destroy the development VM
    containers              List container services
    rebuild <container>     Rebuild a container service
    reload                  Reloads the Umbrel service
    app <command> [options] Manages apps installations
    logs                    Stream Umbrel logs
    run <command>           Run a command inside the development VM
    ssh                     Get an SSH session inside the development VM
EOF
}

# Get gnu sed
gnused=sed
if [[ "$(uname)" == "Darwin" ]]; then
  if ! command -v gsed >/dev/null 2>&1; then
    echo "Error: This script requires gnu-sed!"
    echo "Install it with:"
    echo "  brew install gnu-sed"
    exit 1
  fi
  gnused=gsed
fi

determine_provider() {
  if [[ "$(uname -sm)" == "Darwin arm64" ]]; then
    echo "parallels"
  else
    echo "virtualbox"
  fi
}

# Check required dependencies are installed
# If not, fail with instructions on how to fix
check_dependencies() {
  local deps=("git" "vagrant")

  if [[ "${PROVIDER}" == "virtualbox" ]]; then
    deps+=("vboxmanage")
  elif [[ "${PROVIDER}" == "parallels" ]]; then
    deps+=("prlctl")
  fi

  for cmd in "${deps[@]}"; do
    if ! command -v $cmd >/dev/null 2>&1; then
      echo "  Command is missing: ${cmd}"
      echo
      echo "  To continue, please install '${cmd}' using:"
      echo
      if [[ "${cmd}" == "git" ]]; then
        echo "  brew install git"
      elif [[ "${cmd}" == "vagrant" ]]; then
        echo "  brew install --cask vagrant"
      elif [[ "${cmd}" == "vboxmanage" ]]; then
        echo "  brew install --cask virtualbox"
      elif [[ "${cmd}" == "prlctl" ]]; then
        echo "  brew install --cask parallels"
      fi
      echo
      exit 1
    fi
  done

  # Due a bug within vagrant (2.2.19) with missing constants
  # we need to patch this ourselves
  local -r original_vagrant_path_file="/opt/vagrant/embedded/gems/2.2.19/gems/vagrant-2.2.19/plugins/hosts/darwin/cap/path.rb"
  if [[ -f "${original_vagrant_path_file}" ]] && [[ "$(sha256sum ${original_vagrant_path_file} | awk '{ print $1 }')" == "a094a01c0268614dcecd85f2cf8b34072594ffe8a8bbdddb430981e30104a6d2" ]]; then
    echo
    echo "***************************************"
    echo "* We've detected you're running a     *"
    echo "* version of vagrant that has a bug.  *"
    echo "* We will fix this for you, but this  *"
    echo "* requires sudo. You will now be      *"
    echo "* prompted for your password.         *"
    echo "***************************************"
    echo

    # Now download working vagrant path file
    local -r working_vagrant_path_file="https://raw.githubusercontent.com/hashicorp/vagrant/42db2569e32a69e604634462b633bb14ca20709a/plugins/hosts/darwin/cap/path.rb"
    local -r temp_vagrant_path_file="${original_vagrant_path_file//path.rb/path_new.rb}"
    sudo curl -o "${temp_vagrant_path_file}" "${working_vagrant_path_file}"

    # Check patched vagrant path file matches expected checksum
    if [[ "$(sha256sum ${temp_vagrant_path_file} | awk '{ print $1 }')" == "d982b3ebde081f3160374c9484880cb706435068133e1856042efcb44edf57f9" ]]; then
      # Make a backup of the origianl file
      local -r backup_vagrant_path_file="${original_vagrant_path_file//path.rb/path_backup.rb}"
      sudo mv "${original_vagrant_path_file}" "${backup_vagrant_path_file}"
      sudo mv "${temp_vagrant_path_file}" "${original_vagrant_path_file}"

      echo
      echo "**********************************"
      echo "* Patch was successfully applied *"
      echo "**********************************"
      echo
    fi
  fi
}

# Run a command inside the development VM
run_in_vm() {
  vagrant ssh -c "cd /vagrant/getumbrel/umbrel && $1"
}

# Get script location and correctly handle any symlinks
get_script_location() {
  source="${BASH_SOURCE[0]}"
  # Resolve $source until the file is no longer a symlink
  while [ -h "$source" ]; do
    dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
    source="$(readlink "$source")"
    # If $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    [[ $source != /* ]] && source="$dir/$source"
  done
  dir="$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)"
  echo $dir
}

check_umbrel_dev_environment() {
  filename=".umbrel-dev"
  dir=$PWD
  while [ ! -e "$dir/$filename" ]; do
    dir=${dir%/*}
    if [[ "$dir" = "" ]]; then
      echo "Error: This doesn't seem to be an umbrel-dev environment."
      exit 1
    fi
  done
}

PROVIDER="${UMBREL_DEV_PROVIDER:-$(determine_provider)}"

export ARCH="${UMBREL_DEV_ARCH:-$(uname -m)}"

# Check deps before running any commands
check_dependencies

if [ -z ${1+x} ]; then
  command=""
else
  command="$1"
fi

# Initialize an Umbrel development environment in the working directory
if [[ "$command" = "init" ]]; then
  if [[ "$(ls -A)" ]]; then
    echo "Working directory must be empty!"
    exit 1
  fi

  echo "Creating Vagrantfile..."
  cp "$(get_script_location)/Vagrantfile" .

  echo

  if [[ "${PROVIDER}" == "parallels" ]]; then
    vagrant plugin install --local vagrant-parallels
  fi
  
  vagrant plugin install --local vagrant-bindfs

  echo
  echo "Cloning container repositories..."
  repos="getumbrel/umbrel getumbrel/umbrel-dashboard getumbrel/umbrel-manager getumbrel/umbrel-middleware"
  for repo in $repos; do
    echo
    git clone "https://github.com/$repo.git" "$repo"
    if [[ "$repo" == "getumbrel/umbrel" ]]; then
      echo
      echo "Adding Docker Compose overrides to $repo..."
      cp "$(get_script_location)/docker-compose.override.yml" "$repo/"
    fi
  done

  touch .umbrel-dev

  echo
  echo "Your development environment is now setup"
  echo "You can boot your development VM with:"
  echo
  echo "  umbrel-dev boot"
  exit
fi

# Boot the development VM
if [[ "$command" = "boot" ]]; then
  check_umbrel_dev_environment

  vagrant up --provider "${PROVIDER}"
  exit
fi

# Shutdown the development VM
if [[ "$command" = "shutdown" ]]; then
  check_umbrel_dev_environment

  run_in_vm "sudo scripts/stop || true"

  vagrant halt
  exit
fi

# Destroy the development VM
if [[ "$command" = "destroy" ]]; then
  check_umbrel_dev_environment
  echo "Warning: This will completely remove the VM meaning it needs to be recreated on next boot."
  echo "If you just want to stop the VM run: umbrel-dev shutdown"
  vagrant destroy
  exit
fi

# List container services
if [[ "$command" = "containers" ]]; then
  check_umbrel_dev_environment
  run_in_vm "docker-compose config --services"
  exit
fi

# Rebuild a container service
if [[ "$command" = "rebuild" ]]; then
  check_umbrel_dev_environment
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  container="$2"
  run_in_vm "                           \
       docker-compose build $container  \
    && docker-compose stop $container   \
    && docker-compose rm -f $container  \
    && DEVICE_HOSTS=http://umbrel-dev.local docker-compose up -d $container"
  exit
fi

# Rebuild a container service
if [[ "$command" = "reload" ]]; then
  check_umbrel_dev_environment
  echo "Reloading the Umbrel service..."
  echo
  run_in_vm "                  \
       sudo scripts/stop       \
    && sudo scripts/configure  \
    && sudo scripts/start"
  exit
fi

# Rebuild a container service
if [[ "$command" = "app" ]]; then
  check_umbrel_dev_environment
  if [ -z ${2+x} ]; then
    args=""
  else
    args="${@:2}"
  fi
  run_in_vm "scripts/app ${args}"
  exit
fi

# Stream Umbrel logs
if [[ "$command" = "logs" ]]; then
  check_umbrel_dev_environment
  while true; do
    run_in_vm "docker-compose logs -f" || {
      echo "$(date +"%T") Trying again in 1 second..."
    }
    sleep 1
  done
  exit
fi

# Run a command inside the development VM
if [[ "$command" = "run" ]]; then
  check_umbrel_dev_environment
  if [ -z ${2+x} ]; then
    echo "A second argument is required!"
    exit 1
  fi
  run_in_vm "$2"
  exit
fi

# Get an SSH session inside the development VM
if [[ "$command" = "ssh" ]]; then
  check_umbrel_dev_environment
  run_in_vm bash
  exit
fi

# If we get here it means no valid command was supplied
# Show help and exit
show_help
exit 1
